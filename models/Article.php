<?php

namespace app\models;

use Yii;
use yii\db\Query;
use yii\helpers\ArrayHelper;
use yii\data\Pagination;
use yii\helpers\Url;

/**
 * This is the model class for table "article".
 *
 * @property int $id
 * @property string $title
 * @property string $description
 * @property string $content
 * @property string $date
 * @property string $image
 * @property int $viewed
 * @property int $user_id
 * @property int $status
 * @property int $category_id
 *
 * @property ArticleTag[] $articleTags
 * @property Comment[] $comments
 */
class Article extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'article';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['title'], 'required'],
            [['title', 'description', 'content'], 'string'],
            [['date'], 'date', 'format' => 'php:Y-m-d'],
            [['date'], 'default', 'value' => date('Y-m-d')],
            [['title'], 'string', 'max' => 255],
            [['category_id'], 'number'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Title',
            'description' => 'Description',
            'content' => 'Content',
            'date' => 'Date',
            'image' => 'Image',
            'viewed' => 'Viewed',
            'user_id' => 'User ID',
            'status' => 'Status',
            'category_id' => 'Category ID',
        ];
    }

    public function saveImage($fileName)
    {
        $this->image = $fileName;
        return $this->save(false);
    }

    public function getImage()
    {
        return ($this->image) ? '/uploads/' . $this->image : '/no-image.png';
    }

    public function deleteImage()
    {
        $imageUploadModel = new ImageUpload();
        $imageUploadModel->deleteCurrentImage($this->image);
    }

    public function beforeDelete()
    {
        $this->deleteImage();
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function getCategory()
    {
        return $this->hasOne(Category::className(), ['id' => 'category_id']);
    }

    public function saveCategory($category_id)
    {
        $category = Category::findOne($category_id);
        if ($category != null) {
            $this->link('category', $category);
            return true;
        }
    }

    public function getTags()
    {
        return $this->hasMany(Tag::className(), ['id' => 'tag_id'])
            ->viaTable('article_tag', ['article_id' => 'id']);
    }

    public function getSelectedTags()
    {
        $selectedTags = $this->getTags()->select('id')->asArray()->all();
        return ArrayHelper::getColumn($selectedTags, 'id');
    }

    public function saveTags($tags)
    {
        if (is_array($tags)) {
            $this->clearCarrentTags();
            foreach ($tags as $tag_id) {
                $tag = Tag::findOne($tag_id);
                $this->link('tags', $tag);
            }
        }
    }

    private function clearCarrentTags()
    {
        ArticleTag::deleteAll(['article_id' => $this->id]);
    }

    public function getDate()
    {
        return Yii::$app->formatter->asDate($this->date);
    }

    public static function getAll($pageSize = 5)
    {
        $query = Article::find();
        $count = $query->count();
        $pagination = new Pagination(['totalCount' => $count, 'pageSize' => $pageSize]);
        $articles = $query
            ->offset($pagination->offset)
            ->limit($pagination->limit)
            ->orderBy('date desc')
            ->all();
        $data['articles'] = $articles;
        $data['pagination'] = $pagination;
        return $data;
    }

    public static function getPopular()
    {
        return Article::find()
            ->orderBy('viewed desc')
            ->limit(3)
            ->all();
    }

    public static function getRecent()
    {
        return Article::find()->orderBy('date desc')->limit(3)->all();
    }

    public function saveArticle()
    {
        $this->user_id = Yii::$app->user->id;
        return $this->save();
    }

    public function getArticleComments($pageSize = 5)
    {
        $count = $this->countArticleComments();
        $pagination = new Pagination(['totalCount' => $count, 'pageSize' => $pageSize]);
        $data['pagination'] = $pagination;
        $data['comments'] = [];
        if ($count != 0) {
            $data['comments'] = $this->hasMany(Comment::className(), ['article_id' => 'id'])
                ->offset($pagination->offset)
                ->limit($pagination->limit)
                ->orderBy('date desc')
                ->all();
        }
        return $data;
    }

    public function countArticleComments()
    {
        return $this->hasMany(Comment::className(), ['article_id' => 'id'])->count();
    }

    public static function getPreviousArticle($id)
    {
        $article = Article::findOne($id);
        $query = new Query();
        $subquery = (new Query())
            ->select('max(id) as id')
            ->from('article')
            ->where(['and', 'id<' . $id, 'category_id=' . $article->category_id])
            ->all();
        if (!is_null($subquery[0]['id'])) {
            $articles = Article::findOne(['id' => $subquery[0]['id']]);
        } else {
            $articles = Article::findOne([['id' => $id]]);
        }
        return $articles;
    }

    public static function getNextArticle($id)
    {
        $article = Article::findOne($id);
        $subquery = (new Query())
            ->select('min(id) as id')
            ->from('article')
            ->where(['and', 'id>' . $id, 'category_id=' . $article->category_id])
            ->all();
        if (!is_null($subquery[0]['id'])) {
            $articles = Article::findOne(['id' => $subquery[0]['id']]);
        } else {
            $articles = Article::findOne([['id' => $id]]);
        }
        return $articles;
    }

    public static function getRelatedArticles($id)
    {
        $article = Article::findOne($id);
        $articles = Article::find()
            ->where(['category_id' => $article->category_id])
            ->orderBy('viewed desc')
            ->limit(6)
            ->all();
        return $articles;
    }

    public function getUserName()
    {
        $user = User::findOne(['id' => $this->user_id]);
        if (!is_null($user)) {
            return $user->name;
        } else {
            return "no-name";
        }
    }

    //проверяем есть ли параметр page который всегд фиксируется при добавлении комментария
    // или при перелистывании комментариев
    // и если есть  не считаем просмотры
    public function countView()
    {
        $url = $_SERVER['REQUEST_URI'];
        $str = parse_str($url, $query);
        if (!isset($query['page'])) {
            if (is_null($this->viewed)) {
                $this->viewed = 1;
                $this->save();
            } else {
                $this->updateCounters(['viewed' => 1]);
            }
        }
    }
}
